close all
% clear_timers; clear_sockets; clear all;clear classes
clc

% Load the constants that define this experiment
C = experiment_constants;

% Stimulation Parameters ==================================================
% Channels to test
stim_channels = 128+(1:32);%(1:32);

% Amplitudes to test [min max], uA 
amplitude_range = C.AMPLITUDE_RANGE;

% Stimulation frequency, Hz
frequency = C.STIM_FREQUENCY;

% Recording Parameters ==================================================
invert_channel = false;

save_trial = false;
% =========================================================================
stimulation_parameters = struct( ...
    'channels',                 stim_channels,...
    'event_names',              {arrayfun(@(x)sprintf('EVT%02d',x),stim_channels,'un',0)},...
    'amplitude_min_difference', C.AMP_MIN_DIFF,  ...
    'amplitude_range',          amplitude_range,...
    'frequency',                frequency,...
    'frequency_range',          C.FREQUENCY_RANGE,...
    'duration',                 C.EXTRACT_TIME_RANGE,...
    'reps_per_set',             C.STA_REPS_PER_SET,...
    'stim_step',                C.STIM_STEP,...
    'stim_multiplier',          C.STIM_MULTIPLIER,...
    'cathode_duration',         C.STIM_CATH_DUR_MS,...
    'anode_duration',           C.STIM_ANOD_DUR_MS,...
    'stim_polarity',            C.STIM_POLARITY);
                
channels = C.TRIPOLAR.CUFF_CHANNELS;
labels   = C.TRIPOLAR.CUFF_LABELS;

nCuffs   = length(channels)/2;
recording_parameters = struct( ...
    'baseline_duration',    1,...
    'analog',               [],...
    'digital',              [],...
    'spikes',               []);

recording_parameters.analog  =  struct( ...
    'type',             C.TRIPOLAR.CUFF_TYPE,...
    'channels',         {C.TRIPOLAR.CUFF_CHANNELS{:}}, ...
    'upsample',         C.TRIPOLAR.UPSAMPLE, ...
    'filter_pipeline',  {C.TRIPOLAR.FILTER_PIPELINE}, ...
    'invert',           invert_channel, ...
    'labels',           C.TRIPOLAR.CUFF_LABELS);

recording_parameters.digital = struct( ...
    'channels', C.STIM_EVENT_CHANNEL);
recording_parameters.spikes  = struct( ...
    'channels', []);


protocol = STAProbeExperimentProtocol( ...
    'catName',                  C.CAT_NAME,...
    'electrode_location',       C.DRG_LOCATION,...
    'electrode_type',           C.ELECTRODE_TYPE,...
    'stimulator_type',          C.STIMULATOR_TYPE,...
    'buffer_type',              C.BUFFER_TYPE,...
    'stimulation_parameters',   stimulation_parameters,...
    'recording_parameters',     recording_parameters,...
    'demultiplex_events',       true,...
    'save_trial',               save_trial);

initialize(protocol)
run(protocol)