% close all
clear_timers; clear_sockets; clear all;clear classes
clc

% Load the constants that define this experiment
C = experiment_constants;

% Stimulation Parameters ==================================================
% Stimulation frequency, Hz
frequency = 50;

% Channels to test
amp10_channels = [];
amp20_channels = [];
amp40_channels = [];
stim_channels = setdiff(1:32,[amp10_channels amp20_channels]);

% Amplitudes to test [min max], uA 
amplitude_range = [1 20];

% Number of repetitions to run per set. Additional reps are run whenever
% a set does not produce a significant response
nReps = 50;

% Recording Parameters ==================================================
invert_channel = C.TRIPOLAR.INVERT_CHANNEL;

save_trial = false;
% =========================================================================
min_amplitude_difference = min([max([5,.1*amplitude_range(end)]) 1]);
stim_duration  = .9/frequency;
stimulation_parameters = struct( ...
    'channels',         stim_channels,...
    'event_names',      {arrayfun(@(x)sprintf('EVT%02d',x),stim_channels,'un',0)},...
    'amplitude_min_difference',  min_amplitude_difference,  ...
    'amplitude_range',  amplitude_range,...
    'frequency_range',  C.FREQUENCY_RANGE,...
    'frequency',        frequency,...
    'duration',         stim_duration,...
    'reps_per_set',     nReps);
                
channels = C.TRIPOLAR.CUFF_CHANNELS;
labels   = C.TRIPOLAR.CUFF_LABELS;
invert_channel = invert_channel{2};
channels       = channels;
labels         = labels;
nCuffs   = length(channels)/2;
recording_parameters = struct( ...
    'baseline_duration',1,...
    'analog',           [],...
    'digital',          [],...
    'spikes',           []);
recording_parameters.analog  =  struct( ...
    'type',             'surfd_raw',...
    'channels',         {channels}, ...
    'filter_pipeline',  {C.TRIPOLAR.FILTER_PIPELINE}, ...
    'upsample',         C.TRIPOLAR.UPSAMPLE, ...
    'invert',           [false], ...
    'labels',           {labels});

recording_parameters.digital = struct( ...
    'channels', C.STIM_EVENT_CHANNEL);
recording_parameters.spikes  = struct( ...
    'channels', []);


protocol = STAProbeExperimentProtocol( ...
    'save_trial',               save_trial,...
    'stimulator_type',          C.STIMULATOR_TYPE,...
    'buffer_type',              C.BUFFER_TYPE,...
    'stimulation_parameters',   stimulation_parameters,...
    'recording_parameters',     recording_parameters,...
    'demultiplex_events',       true);

initialize(protocol)
run(protocol)